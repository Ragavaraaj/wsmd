name: WSMD Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  build-main-executable:
    name: Build Main Executable
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller wsmd.spec

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsmd-executable
          path: dist/wsmd.exe
          retention-days: 30 # Artifact will be available for 30 days

  build-dashboard-executable:
    name: Build Dashboard Executable
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build dashboard executable with PyInstaller
        run: |
          cd ${{ github.workspace }}
          dir dashboard
          pyinstaller --onefile --clean --windowed --name wsmd_dashboard dashboard/main.py

      - name: Upload dashboard executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsmd-dashboard-executable
          path: dist/wsmd_dashboard.exe
          retention-days: 30 # Artifact will be available for 30 days

  build-raspberry-pi-executable:
    name: Build Raspberry Pi Executable
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static gcc-arm-linux-gnueabihf
          
      - name: Install PyInstaller and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Use the Raspberry Pi specific requirements without bcrypt
          pip install -r requirements-raspberry-pi.txt
          
      - name: Build Raspberry Pi executable
        run: |
          # Directly build with PyInstaller using ARM as target architecture
          sed -i 's/console=True/console=True, target_arch="armhf"/' wsmd.spec
          
          # Build the executable
          python -m PyInstaller wsmd.spec --distpath=./dist-arm
          
          # Rename for clarity
          mv ./dist-arm/wsmd ./dist-arm/wsmd-arm
          
          # Check the output
          ls -la ./dist-arm/
          file ./dist-arm/wsmd-arm

      - name: Upload Raspberry Pi executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsmd-raspberry-pi-executable
          path: ./dist-arm/wsmd-arm
          retention-days: 30

  build-raspberry-pi-dashboard:
    name: Build Raspberry Pi Dashboard
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static gcc-arm-linux-gnueabihf python3-tk
          
      - name: Install PyInstaller and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # The dashboard doesn't need most of the server dependencies
          
      - name: Build Raspberry Pi dashboard executable
        run: |
          # Build the dashboard executable directly
          python -m PyInstaller --onefile --name wsmd_dashboard-arm dashboard/main.py --distpath=./dist-arm-dashboard
          
          # Check the output
          ls -la ./dist-arm-dashboard/
          file ./dist-arm-dashboard/wsmd_dashboard-arm

      - name: Upload Raspberry Pi dashboard executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wsmd-raspberry-pi-dashboard-executable
          path: ./dist-arm-dashboard/wsmd_dashboard-arm
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs:
      [
        build-main-executable,
        build-dashboard-executable,
        build-raspberry-pi-executable,
        build-raspberry-pi-dashboard,
      ]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check for recent releases
        id: check_releases
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if a release was created in the last 5 minutes
            const date = new Date();
            date.setMinutes(date.getMinutes() - 5);
            const since = date.toISOString();

            console.log(`Checking for releases created since ${since}`);

            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            if (releases.data.length > 0) {
              const recentRelease = releases.data[0];
              console.log(`Most recent release: ${recentRelease.tag_name} created at ${recentRelease.created_at}`);
              
              const releaseDate = new Date(recentRelease.created_at);
              if (releaseDate > date) {
                console.log(`Found recent release: ${recentRelease.tag_name}`);
                return 'skip';
              }
            }

            return 'create';
          result-encoding: string

      - name: Download main executable artifact
        if: steps.check_releases.outputs.result == 'create'
        uses: actions/download-artifact@v4
        with:
          name: wsmd-executable
          path: artifacts/main

      - name: Download dashboard executable artifact
        if: steps.check_releases.outputs.result == 'create'
        uses: actions/download-artifact@v4
        with:
          name: wsmd-dashboard-executable
          path: artifacts/dashboard

      - name: Download Raspberry Pi executable artifact
        if: steps.check_releases.outputs.result == 'create'
        uses: actions/download-artifact@v4
        with:
          name: wsmd-raspberry-pi-executable
          path: artifacts/raspberry-pi

      - name: Download Raspberry Pi dashboard executable artifact
        if: steps.check_releases.outputs.result == 'create'
        uses: actions/download-artifact@v4
        with:
          name: wsmd-raspberry-pi-dashboard-executable
          path: artifacts/raspberry-pi-dashboard

      - name: List downloaded artifacts
        if: steps.check_releases.outputs.result == 'create'
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f | sort

      - name: Validate downloaded artifacts
        if: steps.check_releases.outputs.result == 'create'
        id: validate_artifacts
        run: |
          # Check if we have all executables
          if [ ! -f "artifacts/main/wsmd.exe" ]; then
            echo "::error::Missing main executable (wsmd.exe)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ ! -f "artifacts/dashboard/wsmd_dashboard.exe" ]; then
            echo "::error::Missing dashboard executable (wsmd_dashboard.exe)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ ! -f "artifacts/raspberry-pi/wsmd-arm" ]; then
            echo "::error::Missing Raspberry Pi executable (wsmd-arm)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ ! -f "artifacts/raspberry-pi-dashboard/wsmd_dashboard-arm" ]; then
            echo "::error::Missing Raspberry Pi dashboard executable (wsmd_dashboard-arm)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "All executables found!"
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check executable formats to make sure they're valid
          echo "Checking executable formats:"
          file artifacts/main/wsmd.exe || true
          file artifacts/dashboard/wsmd_dashboard.exe || true
          file artifacts/raspberry-pi/wsmd-arm || true
          file artifacts/raspberry-pi-dashboard/wsmd_dashboard-arm || true

      - name: Create release directory
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        run: |
          mkdir -p release-files

      - name: Copy artifacts to release directory
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        run: |
          # Copy executables to release directory
          cp artifacts/main/wsmd.exe release-files/
          cp artifacts/dashboard/wsmd_dashboard.exe release-files/
          cp artifacts/raspberry-pi/wsmd-arm release-files/
          cp artifacts/raspberry-pi-dashboard/wsmd_dashboard-arm release-files/

          # Ensure the Linux executables are executable
          chmod +x release-files/wsmd-arm
          chmod +x release-files/wsmd_dashboard-arm

          echo "Release files:"
          ls -la release-files/

      - name: Create release tag
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        id: create_tag
        run: |
          # Generate a tag based on the date and time
          TAG="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          name: WSMD Release ${{ steps.create_tag.outputs.tag }}
          body: |
            Automated release of WSMD executables

            This release contains:
            - WSMD Server application for Windows (wsmd.exe)
            - WSMD Dashboard application for Windows (wsmd_dashboard.exe)
            - WSMD Server application for Raspberry Pi (wsmd-arm)
            - WSMD Dashboard application for Raspberry Pi (wsmd_dashboard-arm)

            ## Windows Executables
            Both Windows executables are standalone and do not require installation.

            ### Server Application (Windows)
            The WSMD Server provides a web interface for device management.
            Run wsmd.exe to start the server on port 8000.

            ### Dashboard Application (Windows)
            The WSMD Dashboard provides a dedicated display of device status.
            Run wsmd_dashboard.exe to launch the dashboard.

            ## Raspberry Pi Executables
            ### Server Application (Raspberry Pi)
            To run on Raspberry Pi Zero:
            1. Download the wsmd-arm file
            2. Make it executable: `chmod +x wsmd-arm`
            3. Run it: `./wsmd-arm`

            ### Dashboard Application (Raspberry Pi)
            To run on Raspberry Pi Zero:
            1. Download the wsmd_dashboard-arm file
            2. Make it executable: `chmod +x wsmd_dashboard-arm`
            3. Run it: `./wsmd_dashboard-arm`

            ---
            Built from commit: ${{ github.sha }}
            Release date: $(date +'%Y-%m-%d %H:%M:%S UTC')
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
