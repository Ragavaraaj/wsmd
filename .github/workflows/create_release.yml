name: Create Release

on:
  workflow_run:
    workflows: ["Build Executable", "Build Dashboard Executable"]
    types:
      - completed
    branches: [main]
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  create-release:
    # Only run if the triggering workflow succeeded and it's not a PR
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'pull_request' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check for recent releases
        id: check_releases
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if a release was created in the last 5 minutes
            const date = new Date();
            date.setMinutes(date.getMinutes() - 5);
            const since = date.toISOString();

            console.log(`Checking for releases created since ${since}`);

            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            if (releases.data.length > 0) {
              const recentRelease = releases.data[0];
              console.log(`Most recent release: ${recentRelease.tag_name} created at ${recentRelease.created_at}`);
              
              const releaseDate = new Date(recentRelease.created_at);
              if (releaseDate > date) {
                console.log(`Found recent release: ${recentRelease.tag_name}`);
                return 'skip';
              }
            }

            return 'create';
          result-encoding: string

      - name: Download artifacts from previous workflows
        if: steps.check_releases.outputs.result == 'create'
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: ${{ github.repository }}
          workflow: Build Executable,Build Dashboard Executable
          workflow_conclusion: success
          path: artifacts
          if_no_artifact_found: fail

      - name: List downloaded artifacts
        if: steps.check_releases.outputs.result == 'create'
        run: |
          ls -la artifacts
          find artifacts -type f | sort

      - name: Validate downloaded artifacts
        if: steps.check_releases.outputs.result == 'create'
        id: validate_artifacts
        run: |
          # List all downloaded files for debugging
          echo "Listing all downloaded files:"
          find artifacts -type f | sort
          
          # Check if we have both executables (anywhere in the artifacts directory)
          MAIN_EXE_COUNT=$(find artifacts -name "wsmd.exe" | wc -l)
          DASHBOARD_EXE_COUNT=$(find artifacts -name "wsmd_dashboard.exe" | wc -l)
          
          echo "Found $MAIN_EXE_COUNT main executable(s) and $DASHBOARD_EXE_COUNT dashboard executable(s)"
          
          if [ $MAIN_EXE_COUNT -eq 0 ]; then
            echo "::error::Missing main executable (wsmd.exe)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ $DASHBOARD_EXE_COUNT -eq 0 ]; then
            echo "::error::Missing dashboard executable (wsmd_dashboard.exe)"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Both executables found!"
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create release directory
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        run: |
          mkdir -p release-files

      - name: Copy artifacts to release directory
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        run: |
          # Find the executable files and copy them to the release directory
          echo "Copying executables to release directory..."
          
          # Find all executables
          MAIN_EXE_PATH=$(find artifacts -name "wsmd.exe" | head -n 1)
          DASHBOARD_EXE_PATH=$(find artifacts -name "wsmd_dashboard.exe" | head -n 1)
          
          # Copy them with specific names (this ensures consistent naming)
          cp "$MAIN_EXE_PATH" release-files/wsmd.exe
          cp "$DASHBOARD_EXE_PATH" release-files/wsmd_dashboard.exe
          
          echo "Release files:"
          ls -la release-files/

      - name: Create release tag
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        id: create_tag
        run: |
          # Generate a tag based on the date and time
          TAG="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_releases.outputs.result == 'create' && steps.validate_artifacts.outputs.proceed == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          name: WSMD Release ${{ steps.create_tag.outputs.tag }}
          body: |
            Automated release of WSMD executables

            This release contains:
            - WSMD Server application (wsmd.exe)
            - WSMD Dashboard application (wsmd_dashboard.exe)
            
            Both executables are standalone and do not require installation.
            
            ## Server Application
            The WSMD Server provides a web interface for device management.
            Run wsmd.exe to start the server on port 8000.
            
            ## Dashboard Application
            The WSMD Dashboard provides a dedicated display of device status.
            Run wsmd_dashboard.exe to launch the dashboard.
            
            ---
            Built from commit: ${{ github.sha }}
            Release date: $(date +'%Y-%m-%d %H:%M:%S UTC')
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
